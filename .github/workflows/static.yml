# Feuerwehr Hamberg - GitHub Pages Deployment
name: Deploy to GitHub Pages

on:
  push:
    branches: [main]
  # Allow manual triggering
  workflow_dispatch:

permissions:
  contents: write
  pages: write
  id-token: write

# Allow only one concurrent deployment
concurrency:
  group: "pages"
  cancel-in-progress: false

jobs:
  # Simple deployment job
  deploy:
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Pages
        uses: actions/configure-pages@v5

      - name: Setup Git credentials
        run: |
          # Use default GitHub Actions credentials (sufficient for basic functionality)
          echo "✅ Using GitHub Actions default credentials"
          git config --global user.email "action@github.com"
          git config --global user.name "GitHub Action"

      - name: Create data branch if it doesn't exist
        run: |
          # Check if data branch exists remotely
          if ! git ls-remote --exit-code --heads origin data >/dev/null 2>&1; then
            echo "Creating data branch for member data storage..."
            
            # Create orphan branch for data storage
            git checkout --orphan data
            git rm -rf . || true
            
            # Create data branch structure
            echo "# 🔒 Feuerwehr Hamberg - Mitgliederdaten" > README.md
            echo "" >> README.md
            echo "Dieser Branch enthält die Mitgliederdaten der Feuerwehr Hamberg." >> README.md
            echo "Zugriff nur für autorisierte Personen." >> README.md
            echo "" >> README.md
            echo "## Datenformat" >> README.md
            echo "- JSON-Dateien mit Zeitstempel" >> README.md
            echo "- Format: member-data-YYYY-MM-DDTHH-mm-ss-sssZ.json" >> README.md
            echo "" >> README.md
            echo "## Zugriff" >> README.md
            echo "- Nur über GitHub Personal Access Token" >> README.md
            echo "- Sichere Authentifizierung via GitHub Actions" >> README.md
            
            mkdir -p data
            echo "# Mitgliederdaten werden hier gespeichert" > data/README.md
            echo "Zugang nur mit entsprechenden Berechtigungen." >> data/README.md
            
            git add README.md data/README.md
            git commit -m "Initialize secure data branch for member data storage"
            git push origin data
            
            # Switch back to main branch
            git checkout main
            
            echo "✅ Data branch created successfully with secure access"
          else
            echo "✅ Data branch already exists"
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Inject GitHub token into JavaScript (for data submission)
        run: |
          # Debug: Check if DATA_TRANSFER_TOKEN secret exists
          echo "🔍 Debug: Checking DATA_TRANSFER_TOKEN availability..."
          if [ ! -z "${{ secrets.DATA_TRANSFER_TOKEN }}" ]; then
            echo "✅ DATA_TRANSFER_TOKEN found - enabling data submission functionality"
            echo "🔍 Token starts with: $(echo '${{ secrets.DATA_TRANSFER_TOKEN }}' | cut -c1-8)..."
            echo "🔍 Token length: $(echo '${{ secrets.DATA_TRANSFER_TOKEN }}' | wc -c)"
            
            # Use Node.js for reliable token replacement
            cat > token_inject.js << 'EOF'
            const fs = require('fs');
            
            console.log('🔧 Starting token injection...');
            
            try {
                // Read the script file
                let content = fs.readFileSync('script.js', 'utf8');
                console.log('📄 Script file read successfully');
                
                // Get token from environment
                const token = process.env.GITHUB_DATA_TOKEN;
                if (!token) {
                    throw new Error('No token in environment');
                }
                
                console.log(`🔍 Token validation: starts with ghp_=${token.startsWith('ghp_')}, length=${token.length}`);
                
                // Replace placeholder with actual token
                const updatedContent = content.replace(/GITHUB_TOKEN_PLACEHOLDER/g, token);
                
                // Verify replacement occurred
                const replacements = (content.match(/GITHUB_TOKEN_PLACEHOLDER/g) || []).length;
                const remaining = (updatedContent.match(/GITHUB_TOKEN_PLACEHOLDER/g) || []).length;
                
                console.log(`🔄 Replacements made: ${replacements - remaining} (${remaining} remaining)`);
                
                if (replacements === 0) {
                    throw new Error('No GITHUB_TOKEN_PLACEHOLDER found in script');
                }
                
                if (remaining > 0) {
                    throw new Error(`${remaining} placeholders still remain`);
                }
                
                // Write back to file
                fs.writeFileSync('script.js', updatedContent, 'utf8');
                console.log('✅ Token injection completed successfully!');
                
            } catch (error) {
                console.error('❌ Token injection failed:', error.message);
                process.exit(1);
            }
            EOF
            
            # Run the injection with token in environment
            GITHUB_DATA_TOKEN="${{ secrets.DATA_TRANSFER_TOKEN }}" node token_inject.js
            
            # Clean up
            rm token_inject.js
            
            echo "✅ Data submission enabled with secure token injection"
          else
            echo "❌ DATA_TRANSFER_TOKEN not found in secrets!"
            echo "⚠️  Website will work in preview mode only"
            echo ""
            echo "📝 To fix this issue:"
            echo "   1. Go to: https://github.com/${{ github.repository }}/settings/secrets/actions"
            echo "   2. Click 'New repository secret'"
            echo "   3. Name: DATA_TRANSFER_TOKEN"
            echo "   4. Value: Your Personal Access Token (ghp_...)"
            echo "   5. Click 'Add secret'"
            echo ""
            echo "🔗 Create token at: https://github.com/settings/tokens"
          fi

      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: "."

      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4

  # Generate consolidated data files when data branch is updated
  update-data-files:
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    needs: deploy

    steps:
      - name: Checkout data branch
        uses: actions/checkout@v4
        with:
          ref: data
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.x"

      - name: Generate all_members.json
        run: |
          echo "🔄 Generating all_members.json..."
          echo '{"generated":"'$(date -u +"%Y-%m-%dT%H:%M:%SZ")'","members":[' > data/all_members.json

          first=true
          for file in data/member-data-*.json; do
            if [ -f "$file" ]; then
              if [ "$first" = true ]; then
                first=false
              else
                echo ',' >> data/all_members.json
              fi
              cat "$file" >> data/all_members.json
            fi
          done

          echo ']}' >> data/all_members.json
          echo "✅ Generated all_members.json"

      - name: Generate members.csv
        run: |
          echo "🔄 Generating members.csv..."
          echo "timestamp,nachname,vorname,geburtsdatum,email,strasse,hausnummer,plz,ort,telefon,mta_absolviert,dienstjahre_25,dienstjahre_40" > data/members.csv

          for file in data/member-data-*.json; do
            if [ -f "$file" ]; then
              python3 -c "import json; data = json.load(open('$file', 'r', encoding='utf-8')); print(f\"{data['timestamp']},{data['nachname']},{data['vorname']},{data['geburtsdatum']},{data['email']},{data['adresse']['strasse']},{data['adresse']['hausnummer']},{data['adresse']['plz']},{data['adresse']['ort']},{data['telefon']},{data.get('mta_absolviert', False)},{data.get('dienstjahre_25', False)},{data.get('dienstjahre_40', False)}\")" >> data/members.csv
            fi
          done
          echo "✅ Generated members.csv"

      - name: Create Python script for HTML generation
        run: |
          cat > generate_html.py << 'EOF'
          import json
          import os
          from datetime import datetime

          # Count members and stats
          member_files = [f for f in os.listdir('data') if f.startswith('member-data-') and f.endswith('.json')]
          total_members = len(member_files)
          mta_count = 0
          dienstjahre_25_count = 0  
          dienstjahre_40_count = 0

          members_data = []

          for filename in member_files:
              try:
                  with open(f'data/{filename}', 'r', encoding='utf-8') as f:
                      data = json.load(f)
                      members_data.append(data)
                      if data.get('mta_absolviert', False):
                          mta_count += 1
                      if data.get('dienstjahre_25', False):
                          dienstjahre_25_count += 1
                      if data.get('dienstjahre_40', False):
                          dienstjahre_40_count += 1
              except:
                  pass

          # Generate HTML
          html_content = f'''<!DOCTYPE html>
          <html lang="de">
          <head>
              <meta charset="UTF-8">
              <meta name="viewport" content="width=device-width, initial-scale=1.0">
              <title>Feuerwehr Hamberg - Mitgliederübersicht</title>
              <style>
                  body {{ font-family: Arial, sans-serif; margin: 20px; }}
                  table {{ border-collapse: collapse; width: 100%; }}
                  th, td {{ border: 1px solid #ddd; padding: 8px; text-align: left; }}
                  th {{ background-color: #c41e3a; color: white; }}
                  tr:nth-child(even) {{ background-color: #f2f2f2; }}
                  .stats {{ background: #f8f9fa; padding: 15px; border-radius: 5px; margin-bottom: 20px; }}
              </style>
          </head>
          <body>
              <h1>🚒 Feuerwehr Hamberg - Mitgliederübersicht</h1>
              <div class="stats">
                  <h3>📊 Statistiken</h3>
                  <p><strong>Gesamte Mitglieder:</strong> {total_members}</p>
                  <p><strong>MTA absolviert:</strong> {mta_count}</p>
                  <p><strong>25+ Jahre Dienst:</strong> {dienstjahre_25_count}</p>
                  <p><strong>40+ Jahre Dienst:</strong> {dienstjahre_40_count}</p>
                  <p><strong>Letzte Aktualisierung:</strong> {datetime.now().strftime('%d.%m.%Y %H:%M Uhr')}</p>
              </div>
              <h3>📋 Mitgliederliste</h3>
              <table>
                  <tr>
                      <th>Name</th>
                      <th>Geburtsdatum</th>
                      <th>E-Mail</th>
                      <th>Adresse</th>
                      <th>Telefon</th>
                      <th>MTA</th>
                      <th>25 Jahre</th>
                      <th>40 Jahre</th>
                      <th>Eingetragen</th>
                  </tr>'''

          for data in members_data:
              mta = '✅' if data.get('mta_absolviert', False) else '❌'
              d25 = '✅' if data.get('dienstjahre_25', False) else '❌'
              d40 = '✅' if data.get('dienstjahre_40', False) else '❌'
              adresse = f"{data['adresse']['strasse']} {data['adresse']['hausnummer']}, {data['adresse']['plz']} {data['adresse']['ort']}"
              datum = data['timestamp'][:10]
              
              html_content += f'''
                  <tr>
                      <td>{data['vorname']} {data['nachname']}</td>
                      <td>{data['geburtsdatum']}</td>
                      <td>{data['email']}</td>
                      <td>{adresse}</td>
                      <td>{data['telefon']}</td>
                      <td>{mta}</td>
                      <td>{d25}</td>
                      <td>{d40}</td>
                      <td>{datum}</td>
                  </tr>'''

          html_content += '''
              </table>
          </body>
          </html>'''

          with open('data/members.html', 'w', encoding='utf-8') as f:
              f.write(html_content)

          print(f"✅ Generated members.html with {total_members} members")
          EOF

      - name: Generate members.html
        run: |
          echo "🔄 Generating members.html..."
          python3 generate_html.py

      - name: Commit consolidated files
        run: |
          git config user.name "GitHub Action"
          git config user.email "action@github.com"

          git add data/all_members.json data/members.csv data/members.html

          if git diff --staged --quiet; then
            echo "ℹ️ No changes to consolidated files"
          else
            git commit -m "📊 Update consolidated member data files - $(date '+%d.%m.%Y %H:%M')"
            git push
            echo "✅ Consolidated files updated successfully"
          fi
