# Simple workflow for deploying static content to GitHub Pagesname: Deploy GitHub Pages and Handle Data Submissionname: Deploy GitHub Pages and Handle Data Submission

name: Deploy static content to Pages



on:

  # Runs on pushes targeting the default branchon:on:

  push:

    branches: ["main"]  push:  push:



  # Allows you to run this workflow manually from the Actions tab    branches: [main]    branches: [main]

  workflow_dispatch:

  pull_request:  pull_request:

# Sets permissions of the GITHUB_TOKEN to allow deployment to GitHub Pages

permissions:    branches: [main]    branches: [main]

  contents: read

  pages: write  workflow_dispatch:  # Allow manual triggering

  id-token: write

  workflow_dispatch:

# Allow only one concurrent deployment, skipping runs queued between the run in-progress and latest queued.

# However, do NOT cancel in-progress runs as we want to allow these production deployments to complete.permissions:

concurrency:

  group: "pages"  contents: writepermissions:

  cancel-in-progress: false

  pages: write  contents: write

jobs:

  # Single deploy job since we're just deploying  id-token: write  pages: write

  deploy:

    environment:  id-token: write

      name: github-pages

      url: ${{ steps.deployment.outputs.page_url }}concurrency:

    runs-on: ubuntu-latest

    steps:  group: "pages"# Allow only one concurrent deployment

      - name: Checkout

        uses: actions/checkout@v4  cancel-in-progress: falseconcurrency:

      - name: Setup Pages

        uses: actions/configure-pages@v5  group: "pages"

      - name: Upload artifact

        uses: actions/upload-pages-artifact@v3jobs:  cancel-in-progress: false

        with:

          # Upload entire repository  build-and-deploy:

          path: '.'

      - name: Deploy to GitHub Pages    environment:jobs:

        id: deployment

        uses: actions/deploy-pages@v4      name: github-pages  # Build and deploy the website

      url: ${{ steps.deployment.outputs.page_url }}  build-and-deploy:

    runs-on: ubuntu-latest    environment:

      name: github-pages

    steps:      url: ${{ steps.deployment.outputs.page_url }}

    - name: Checkout repository    runs-on: ubuntu-latest

      uses: actions/checkout@v4

    steps:

    - name: Setup Pages    - name: Checkout repository

      uses: actions/configure-pages@v4      uses: actions/checkout@v4



    - name: Inject GitHub token into JavaScript (if available)    - name: Setup Pages

      run: |      uses: actions/configure-pages@v4

        if [ -n "${{ secrets.FF_DATA_TOKEN }}" ]; then

          echo "FF_DATA_TOKEN found, injecting into JavaScript..."    - name: Create data branch if it doesn't exist

          sed 's/window\.FF_DATA_TOKEN || null/"${{ secrets.FF_DATA_TOKEN }}"/g' script.js > script_with_token.js      run: |

          mv script_with_token.js script.js        # Configure git for GitHub Actions

        else        git config --global user.email "action@github.com"

          echo "FF_DATA_TOKEN not found, website will work in preview mode only"        git config --global user.name "GitHub Action"

        fi        

        # Check if data branch exists

    - name: Upload artifact        if ! git ls-remote --exit-code --heads origin data; then

      uses: actions/upload-pages-artifact@v3          echo "Creating data branch..."

      with:          git checkout --orphan data

        path: '.'          git rm -rf .

          echo "# Data Storage Branch" > README.md

    - name: Deploy to GitHub Pages          echo "This branch contains member data files." >> README.md

      id: deployment          echo "Files are stored in JSON format with timestamps." >> README.md

      uses: actions/deploy-pages@v4          mkdir -p data
          echo "[]" > data/.gitkeep
          git add README.md data/.gitkeep
          git commit -m "Initialize data branch"
          git push origin data
          git checkout main
        else
          echo "Data branch already exists"
        fi
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Inject GitHub token into JavaScript
        run: |
          # Create a version of script.js with the token injected
          sed 's/window\.FF_DATA_TOKEN || null/"${{ secrets.FF_DATA_TOKEN }}"/g' script.js > script_with_token.js
          mv script_with_token.js script.js
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: "."

      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4

  # Separate job to handle data processing (if needed)
  process-data:
    runs-on: ubuntu-latest
    needs: build-and-deploy
    if: github.event_name == 'workflow_dispatch'

    steps:
      - name: Checkout data branch
        uses: actions/checkout@v4
        with:
          ref: data

      - name: List recent data files
        run: |
          echo "Recent member data files:"
          find data -name "member-data-*.json" -type f -mtime -7 | sort -r | head -10

      - name: Create summary report
        run: |
          echo "# Data Summary Report" > data_summary.md
          echo "Generated on: $(date)" >> data_summary.md
          echo "" >> data_summary.md
          echo "## Recent Submissions (Last 7 days)" >> data_summary.md
          find data -name "member-data-*.json" -type f -mtime -7 | wc -l | xargs -I {} echo "Total submissions: {}" >> data_summary.md
          echo "" >> data_summary.md
          echo "## Files:" >> data_summary.md
          find data -name "member-data-*.json" -type f -mtime -7 | sort -r | sed 's/^/- /' >> data_summary.md

      - name: Commit summary report
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add data_summary.md
          if git diff --staged --quiet; then
            echo "No changes to commit"
          else
            git commit -m "Update data summary report"
            git push
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
